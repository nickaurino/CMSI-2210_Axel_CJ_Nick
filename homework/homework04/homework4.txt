 1)
  A  B  C | X  Y
  --------+------
  0  0  0 | 0  1
  0  0  1 | 0  1
  0  1  0 | 0  1
  0  1  1 | 1  1
  1  0  0 | 1  0
  1  0  1 | 1  1
  1  1  0 | 1  0
  1  1  1 | 1  1

1A)
X =  A OR (B AND C)
Y = NOT A OR C

1B)
X = NOT A NAND (NOT B OR NOT C)
Y = A NAND NOT C

2)
(SEE UPLOADED IMAGE)

3)
- 3A) AND R0, R0, 0xAAAAAAAA
- 3B) OR R0, R0, 0x7
- 3C) AND R0, R0, 0x7
- 3D) NOT R0, R0
- 3E) XOR R0, R0, 0xC0000000
- 3F) AND R0, R0, 0xFFFFFFF8


4)
        JMP         top
value:  0x00
top:    LOAD        value
        WRITE       0x08
        ADD         0x01
        STORE       value
        SUB         0x100
        JLZ         top
end:    JMP         end

5)
C0000002            JMP         top
00000000    value:  0x00
00000001    top:    LOAD        value
30000008            WRITE       0x08
40000001            ADD         0x01
10000001            STORE       value
50000001            SUB         0x100
E0000002            JLZ         top
C0000008    end:    JMP         end


6) 
        JMP         start
value1: 0x00
value2: 0x00
start:  LOAD        value1
        READ        0x100
        STORE       value1
        LOAD        value2
        READ        0x100
        STORE       value2
        LOAD        value1
        DIV         value2
        WRITE       0x200
end:    JMP         end

7)
        JMP         start
value1: 0x00
value2: 0x00
start:  STORE       value1
        READ        0x30AA
        STORE       value2
        LOAD        value1
        WRITE       0x30AA
        LOAD        value2
end:    JMP         end

8)
        JMP         start
start:  JLZ         end
        JMP        0x837BBE1
end:    JMP         end

9)
- 9A) The user would notice that the values of the data in r8 and r9 are swapped, meaning that the value originally stored in r8 is now stored in r9, and vice versa. 
- 9B) The first XOR makes a kind of value that changes depending on the values of r8 and r9, which is stored in r8. The second xor cancels out the data stored in r8 that overlaps with r9, meaning r9 is now equal to r8's original value. Finally, when we compare r8 (which is the XOR value) and r9 (which is now equal to what was originally r8), the r8's in the XOR cancel out, making the r8 final value equal to r9. 
       1.    xor r8, r9 => r8n = (r8o XOR r9o)
       2.    xor r9, r8 => r9n = r8o
       3.    xor r8, r9 => r8n = r9o
